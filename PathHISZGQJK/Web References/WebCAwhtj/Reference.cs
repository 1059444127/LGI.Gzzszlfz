//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.1 版自动生成。
// 
#pragma warning disable 1591

namespace PathHISZGQJK.WebCAwhtj {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HealthWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class HealthWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private JSCASoapHeader jSCASoapHeaderValueField;
        
        private System.Threading.SendOrPostCallback SetCertTrustListOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryCertTrustListAltNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryCertTrustListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelCertTrustListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetWebAppNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSignMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSignMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEncryptMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEncryptMethodOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenRandomOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertInfoByOidOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateCertOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifySignedDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifySignedFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecryptDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecryptFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback PubKeyEncryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback PriKeyDecryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignDataByP7OperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifySignedDataByP7OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetP7SignDataInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignDataXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifySignedDataXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXMLSignatureInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTimeStampRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateTimeStampResponseOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyTimeStampOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeStampInfoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public HealthWebService() {
            this.Url = global::PathHISZGQJK.Properties.Settings.Default.PathHISZGQJK_WebCAwhtj_HealthWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public JSCASoapHeader JSCASoapHeaderValue {
            get {
                return this.jSCASoapHeaderValueField;
            }
            set {
                this.jSCASoapHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetCertTrustListCompletedEventHandler SetCertTrustListCompleted;
        
        /// <remarks/>
        public event QueryCertTrustListAltNamesCompletedEventHandler QueryCertTrustListAltNamesCompleted;
        
        /// <remarks/>
        public event QueryCertTrustListCompletedEventHandler QueryCertTrustListCompleted;
        
        /// <remarks/>
        public event DelCertTrustListCompletedEventHandler DelCertTrustListCompleted;
        
        /// <remarks/>
        public event SetWebAppNameCompletedEventHandler SetWebAppNameCompleted;
        
        /// <remarks/>
        public event SetSignMethodCompletedEventHandler SetSignMethodCompleted;
        
        /// <remarks/>
        public event GetSignMethodCompletedEventHandler GetSignMethodCompleted;
        
        /// <remarks/>
        public event SetEncryptMethodCompletedEventHandler SetEncryptMethodCompleted;
        
        /// <remarks/>
        public event GetEncryptMethodCompletedEventHandler GetEncryptMethodCompleted;
        
        /// <remarks/>
        public event GetServerCertificateCompletedEventHandler GetServerCertificateCompleted;
        
        /// <remarks/>
        public event GenRandomCompletedEventHandler GenRandomCompleted;
        
        /// <remarks/>
        public event GetCertInfoCompletedEventHandler GetCertInfoCompleted;
        
        /// <remarks/>
        public event GetCertInfoByOidCompletedEventHandler GetCertInfoByOidCompleted;
        
        /// <remarks/>
        public event ValidateCertCompletedEventHandler ValidateCertCompleted;
        
        /// <remarks/>
        public event SignDataCompletedEventHandler SignDataCompleted;
        
        /// <remarks/>
        public event VerifySignedDataCompletedEventHandler VerifySignedDataCompleted;
        
        /// <remarks/>
        public event SignFileCompletedEventHandler SignFileCompleted;
        
        /// <remarks/>
        public event VerifySignedFileCompletedEventHandler VerifySignedFileCompleted;
        
        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;
        
        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;
        
        /// <remarks/>
        public event EncryptDataCompletedEventHandler EncryptDataCompleted;
        
        /// <remarks/>
        public event DecryptDataCompletedEventHandler DecryptDataCompleted;
        
        /// <remarks/>
        public event EncryptFileCompletedEventHandler EncryptFileCompleted;
        
        /// <remarks/>
        public event DecryptFileCompletedEventHandler DecryptFileCompleted;
        
        /// <remarks/>
        public event PubKeyEncryptCompletedEventHandler PubKeyEncryptCompleted;
        
        /// <remarks/>
        public event PriKeyDecryptCompletedEventHandler PriKeyDecryptCompleted;
        
        /// <remarks/>
        public event SignDataByP7CompletedEventHandler SignDataByP7Completed;
        
        /// <remarks/>
        public event VerifySignedDataByP7CompletedEventHandler VerifySignedDataByP7Completed;
        
        /// <remarks/>
        public event GetP7SignDataInfoCompletedEventHandler GetP7SignDataInfoCompleted;
        
        /// <remarks/>
        public event SignDataXMLCompletedEventHandler SignDataXMLCompleted;
        
        /// <remarks/>
        public event VerifySignedDataXMLCompletedEventHandler VerifySignedDataXMLCompleted;
        
        /// <remarks/>
        public event GetXMLSignatureInfoCompletedEventHandler GetXMLSignatureInfoCompleted;
        
        /// <remarks/>
        public event CreateTimeStampRequestCompletedEventHandler CreateTimeStampRequestCompleted;
        
        /// <remarks/>
        public event CreateTimeStampResponseCompletedEventHandler CreateTimeStampResponseCompleted;
        
        /// <remarks/>
        public event VerifyTimeStampCompletedEventHandler VerifyTimeStampCompleted;
        
        /// <remarks/>
        public event GetTimeStampInfoCompletedEventHandler GetTimeStampInfoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCertTrustList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetCertTrustList(string CTLAltName, string CTLContent, int CTLContentLen) {
            object[] results = this.Invoke("SetCertTrustList", new object[] {
                        CTLAltName,
                        CTLContent,
                        CTLContentLen});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetCertTrustListAsync(string CTLAltName, string CTLContent, int CTLContentLen) {
            this.SetCertTrustListAsync(CTLAltName, CTLContent, CTLContentLen, null);
        }
        
        /// <remarks/>
        public void SetCertTrustListAsync(string CTLAltName, string CTLContent, int CTLContentLen, object userState) {
            if ((this.SetCertTrustListOperationCompleted == null)) {
                this.SetCertTrustListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCertTrustListOperationCompleted);
            }
            this.InvokeAsync("SetCertTrustList", new object[] {
                        CTLAltName,
                        CTLContent,
                        CTLContentLen}, this.SetCertTrustListOperationCompleted, userState);
        }
        
        private void OnSetCertTrustListOperationCompleted(object arg) {
            if ((this.SetCertTrustListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCertTrustListCompleted(this, new SetCertTrustListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryCertTrustListAltNames", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryCertTrustListAltNames() {
            object[] results = this.Invoke("QueryCertTrustListAltNames", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryCertTrustListAltNamesAsync() {
            this.QueryCertTrustListAltNamesAsync(null);
        }
        
        /// <remarks/>
        public void QueryCertTrustListAltNamesAsync(object userState) {
            if ((this.QueryCertTrustListAltNamesOperationCompleted == null)) {
                this.QueryCertTrustListAltNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryCertTrustListAltNamesOperationCompleted);
            }
            this.InvokeAsync("QueryCertTrustListAltNames", new object[0], this.QueryCertTrustListAltNamesOperationCompleted, userState);
        }
        
        private void OnQueryCertTrustListAltNamesOperationCompleted(object arg) {
            if ((this.QueryCertTrustListAltNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCertTrustListAltNamesCompleted(this, new QueryCertTrustListAltNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueryCertTrustList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string QueryCertTrustList(string CTLAltName) {
            object[] results = this.Invoke("QueryCertTrustList", new object[] {
                        CTLAltName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryCertTrustListAsync(string CTLAltName) {
            this.QueryCertTrustListAsync(CTLAltName, null);
        }
        
        /// <remarks/>
        public void QueryCertTrustListAsync(string CTLAltName, object userState) {
            if ((this.QueryCertTrustListOperationCompleted == null)) {
                this.QueryCertTrustListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryCertTrustListOperationCompleted);
            }
            this.InvokeAsync("QueryCertTrustList", new object[] {
                        CTLAltName}, this.QueryCertTrustListOperationCompleted, userState);
        }
        
        private void OnQueryCertTrustListOperationCompleted(object arg) {
            if ((this.QueryCertTrustListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCertTrustListCompleted(this, new QueryCertTrustListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelCertTrustList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DelCertTrustList(string CTLAltName) {
            object[] results = this.Invoke("DelCertTrustList", new object[] {
                        CTLAltName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DelCertTrustListAsync(string CTLAltName) {
            this.DelCertTrustListAsync(CTLAltName, null);
        }
        
        /// <remarks/>
        public void DelCertTrustListAsync(string CTLAltName, object userState) {
            if ((this.DelCertTrustListOperationCompleted == null)) {
                this.DelCertTrustListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelCertTrustListOperationCompleted);
            }
            this.InvokeAsync("DelCertTrustList", new object[] {
                        CTLAltName}, this.DelCertTrustListOperationCompleted, userState);
        }
        
        private void OnDelCertTrustListOperationCompleted(object arg) {
            if ((this.DelCertTrustListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelCertTrustListCompleted(this, new DelCertTrustListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetWebAppName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetWebAppName(string WebAppName) {
            object[] results = this.Invoke("SetWebAppName", new object[] {
                        WebAppName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetWebAppNameAsync(string WebAppName) {
            this.SetWebAppNameAsync(WebAppName, null);
        }
        
        /// <remarks/>
        public void SetWebAppNameAsync(string WebAppName, object userState) {
            if ((this.SetWebAppNameOperationCompleted == null)) {
                this.SetWebAppNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetWebAppNameOperationCompleted);
            }
            this.InvokeAsync("SetWebAppName", new object[] {
                        WebAppName}, this.SetWebAppNameOperationCompleted, userState);
        }
        
        private void OnSetWebAppNameOperationCompleted(object arg) {
            if ((this.SetWebAppNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetWebAppNameCompleted(this, new SetWebAppNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetSignMethod", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetSignMethod(int signMethod) {
            object[] results = this.Invoke("SetSignMethod", new object[] {
                        signMethod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetSignMethodAsync(int signMethod) {
            this.SetSignMethodAsync(signMethod, null);
        }
        
        /// <remarks/>
        public void SetSignMethodAsync(int signMethod, object userState) {
            if ((this.SetSignMethodOperationCompleted == null)) {
                this.SetSignMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSignMethodOperationCompleted);
            }
            this.InvokeAsync("SetSignMethod", new object[] {
                        signMethod}, this.SetSignMethodOperationCompleted, userState);
        }
        
        private void OnSetSignMethodOperationCompleted(object arg) {
            if ((this.SetSignMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSignMethodCompleted(this, new SetSignMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSignMethod", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSignMethod() {
            object[] results = this.Invoke("GetSignMethod", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSignMethodAsync() {
            this.GetSignMethodAsync(null);
        }
        
        /// <remarks/>
        public void GetSignMethodAsync(object userState) {
            if ((this.GetSignMethodOperationCompleted == null)) {
                this.GetSignMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSignMethodOperationCompleted);
            }
            this.InvokeAsync("GetSignMethod", new object[0], this.GetSignMethodOperationCompleted, userState);
        }
        
        private void OnGetSignMethodOperationCompleted(object arg) {
            if ((this.GetSignMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSignMethodCompleted(this, new GetSignMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetEncryptMethod", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetEncryptMethod(int EncryptMethod) {
            object[] results = this.Invoke("SetEncryptMethod", new object[] {
                        EncryptMethod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetEncryptMethodAsync(int EncryptMethod) {
            this.SetEncryptMethodAsync(EncryptMethod, null);
        }
        
        /// <remarks/>
        public void SetEncryptMethodAsync(int EncryptMethod, object userState) {
            if ((this.SetEncryptMethodOperationCompleted == null)) {
                this.SetEncryptMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEncryptMethodOperationCompleted);
            }
            this.InvokeAsync("SetEncryptMethod", new object[] {
                        EncryptMethod}, this.SetEncryptMethodOperationCompleted, userState);
        }
        
        private void OnSetEncryptMethodOperationCompleted(object arg) {
            if ((this.SetEncryptMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEncryptMethodCompleted(this, new SetEncryptMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEncryptMethod", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEncryptMethod() {
            object[] results = this.Invoke("GetEncryptMethod", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEncryptMethodAsync() {
            this.GetEncryptMethodAsync(null);
        }
        
        /// <remarks/>
        public void GetEncryptMethodAsync(object userState) {
            if ((this.GetEncryptMethodOperationCompleted == null)) {
                this.GetEncryptMethodOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEncryptMethodOperationCompleted);
            }
            this.InvokeAsync("GetEncryptMethod", new object[0], this.GetEncryptMethodOperationCompleted, userState);
        }
        
        private void OnGetEncryptMethodOperationCompleted(object arg) {
            if ((this.GetEncryptMethodCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEncryptMethodCompleted(this, new GetEncryptMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerCertificate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerCertificate(int CertUsage) {
            object[] results = this.Invoke("GetServerCertificate", new object[] {
                        CertUsage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerCertificateAsync(int CertUsage) {
            this.GetServerCertificateAsync(CertUsage, null);
        }
        
        /// <remarks/>
        public void GetServerCertificateAsync(int CertUsage, object userState) {
            if ((this.GetServerCertificateOperationCompleted == null)) {
                this.GetServerCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerCertificateOperationCompleted);
            }
            this.InvokeAsync("GetServerCertificate", new object[] {
                        CertUsage}, this.GetServerCertificateOperationCompleted, userState);
        }
        
        private void OnGetServerCertificateOperationCompleted(object arg) {
            if ((this.GetServerCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerCertificateCompleted(this, new GetServerCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenRandom", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenRandom(int len) {
            object[] results = this.Invoke("GenRandom", new object[] {
                        len});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenRandomAsync(int len) {
            this.GenRandomAsync(len, null);
        }
        
        /// <remarks/>
        public void GenRandomAsync(int len, object userState) {
            if ((this.GenRandomOperationCompleted == null)) {
                this.GenRandomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenRandomOperationCompleted);
            }
            this.InvokeAsync("GenRandom", new object[] {
                        len}, this.GenRandomOperationCompleted, userState);
        }
        
        private void OnGenRandomOperationCompleted(object arg) {
            if ((this.GenRandomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenRandomCompleted(this, new GenRandomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCertInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCertInfo(string Base64EncodeCert, string type) {
            object[] results = this.Invoke("GetCertInfo", new object[] {
                        Base64EncodeCert,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertInfoAsync(string Base64EncodeCert, string type) {
            this.GetCertInfoAsync(Base64EncodeCert, type, null);
        }
        
        /// <remarks/>
        public void GetCertInfoAsync(string Base64EncodeCert, string type, object userState) {
            if ((this.GetCertInfoOperationCompleted == null)) {
                this.GetCertInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertInfoOperationCompleted);
            }
            this.InvokeAsync("GetCertInfo", new object[] {
                        Base64EncodeCert,
                        type}, this.GetCertInfoOperationCompleted, userState);
        }
        
        private void OnGetCertInfoOperationCompleted(object arg) {
            if ((this.GetCertInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertInfoCompleted(this, new GetCertInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCertInfoByOid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCertInfoByOid(string Base64EncodeCert, string oid) {
            object[] results = this.Invoke("GetCertInfoByOid", new object[] {
                        Base64EncodeCert,
                        oid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertInfoByOidAsync(string Base64EncodeCert, string oid) {
            this.GetCertInfoByOidAsync(Base64EncodeCert, oid, null);
        }
        
        /// <remarks/>
        public void GetCertInfoByOidAsync(string Base64EncodeCert, string oid, object userState) {
            if ((this.GetCertInfoByOidOperationCompleted == null)) {
                this.GetCertInfoByOidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertInfoByOidOperationCompleted);
            }
            this.InvokeAsync("GetCertInfoByOid", new object[] {
                        Base64EncodeCert,
                        oid}, this.GetCertInfoByOidOperationCompleted, userState);
        }
        
        private void OnGetCertInfoByOidOperationCompleted(object arg) {
            if ((this.GetCertInfoByOidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertInfoByOidCompleted(this, new GetCertInfoByOidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateCert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ValidateCert(string Base64EncodeCert) {
            object[] results = this.Invoke("ValidateCert", new object[] {
                        Base64EncodeCert});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateCertAsync(string Base64EncodeCert) {
            this.ValidateCertAsync(Base64EncodeCert, null);
        }
        
        /// <remarks/>
        public void ValidateCertAsync(string Base64EncodeCert, object userState) {
            if ((this.ValidateCertOperationCompleted == null)) {
                this.ValidateCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCertOperationCompleted);
            }
            this.InvokeAsync("ValidateCert", new object[] {
                        Base64EncodeCert}, this.ValidateCertOperationCompleted, userState);
        }
        
        private void OnValidateCertOperationCompleted(object arg) {
            if ((this.ValidateCertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCertCompleted(this, new ValidateCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SignData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SignData(string InData) {
            object[] results = this.Invoke("SignData", new object[] {
                        InData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SignDataAsync(string InData) {
            this.SignDataAsync(InData, null);
        }
        
        /// <remarks/>
        public void SignDataAsync(string InData, object userState) {
            if ((this.SignDataOperationCompleted == null)) {
                this.SignDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignDataOperationCompleted);
            }
            this.InvokeAsync("SignData", new object[] {
                        InData}, this.SignDataOperationCompleted, userState);
        }
        
        private void OnSignDataOperationCompleted(object arg) {
            if ((this.SignDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignDataCompleted(this, new SignDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifySignedData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifySignedData(string Base64EncodeCert, string InData, string SignValue) {
            object[] results = this.Invoke("VerifySignedData", new object[] {
                        Base64EncodeCert,
                        InData,
                        SignValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifySignedDataAsync(string Base64EncodeCert, string InData, string SignValue) {
            this.VerifySignedDataAsync(Base64EncodeCert, InData, SignValue, null);
        }
        
        /// <remarks/>
        public void VerifySignedDataAsync(string Base64EncodeCert, string InData, string SignValue, object userState) {
            if ((this.VerifySignedDataOperationCompleted == null)) {
                this.VerifySignedDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySignedDataOperationCompleted);
            }
            this.InvokeAsync("VerifySignedData", new object[] {
                        Base64EncodeCert,
                        InData,
                        SignValue}, this.VerifySignedDataOperationCompleted, userState);
        }
        
        private void OnVerifySignedDataOperationCompleted(object arg) {
            if ((this.VerifySignedDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifySignedDataCompleted(this, new VerifySignedDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SignFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SignFile([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string FileName) {
            object[] results = this.Invoke("SignFile", new object[] {
                        fs,
                        FileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SignFileAsync(byte[] fs, string FileName) {
            this.SignFileAsync(fs, FileName, null);
        }
        
        /// <remarks/>
        public void SignFileAsync(byte[] fs, string FileName, object userState) {
            if ((this.SignFileOperationCompleted == null)) {
                this.SignFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignFileOperationCompleted);
            }
            this.InvokeAsync("SignFile", new object[] {
                        fs,
                        FileName}, this.SignFileOperationCompleted, userState);
        }
        
        private void OnSignFileOperationCompleted(object arg) {
            if ((this.SignFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignFileCompleted(this, new SignFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifySignedFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifySignedFile(string Base64EncodeCert, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string FileName, string SignValue) {
            object[] results = this.Invoke("VerifySignedFile", new object[] {
                        Base64EncodeCert,
                        fs,
                        FileName,
                        SignValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifySignedFileAsync(string Base64EncodeCert, byte[] fs, string FileName, string SignValue) {
            this.VerifySignedFileAsync(Base64EncodeCert, fs, FileName, SignValue, null);
        }
        
        /// <remarks/>
        public void VerifySignedFileAsync(string Base64EncodeCert, byte[] fs, string FileName, string SignValue, object userState) {
            if ((this.VerifySignedFileOperationCompleted == null)) {
                this.VerifySignedFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySignedFileOperationCompleted);
            }
            this.InvokeAsync("VerifySignedFile", new object[] {
                        Base64EncodeCert,
                        fs,
                        FileName,
                        SignValue}, this.VerifySignedFileOperationCompleted, userState);
        }
        
        private void OnVerifySignedFileOperationCompleted(object arg) {
            if ((this.VerifySignedFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifySignedFileCompleted(this, new VerifySignedFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteFile(string fileName) {
            object[] results = this.Invoke("DeleteFile", new object[] {
                        fileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string fileName) {
            this.DeleteFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string fileName, object userState) {
            if ((this.DeleteFileOperationCompleted == null)) {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        fileName}, this.DeleteFileOperationCompleted, userState);
        }
        
        private void OnDeleteFileOperationCompleted(object arg) {
            if ((this.DeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFile(string requestFileName) {
            object[] results = this.Invoke("GetFile", new object[] {
                        requestFileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileAsync(string requestFileName) {
            this.GetFileAsync(requestFileName, null);
        }
        
        /// <remarks/>
        public void GetFileAsync(string requestFileName, object userState) {
            if ((this.GetFileOperationCompleted == null)) {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        requestFileName}, this.GetFileOperationCompleted, userState);
        }
        
        private void OnGetFileOperationCompleted(object arg) {
            if ((this.GetFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EncryptData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptData(string key, string InData) {
            object[] results = this.Invoke("EncryptData", new object[] {
                        key,
                        InData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptDataAsync(string key, string InData) {
            this.EncryptDataAsync(key, InData, null);
        }
        
        /// <remarks/>
        public void EncryptDataAsync(string key, string InData, object userState) {
            if ((this.EncryptDataOperationCompleted == null)) {
                this.EncryptDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptDataOperationCompleted);
            }
            this.InvokeAsync("EncryptData", new object[] {
                        key,
                        InData}, this.EncryptDataOperationCompleted, userState);
        }
        
        private void OnEncryptDataOperationCompleted(object arg) {
            if ((this.EncryptDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptDataCompleted(this, new EncryptDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DecryptData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DecryptData(string key, string InData) {
            object[] results = this.Invoke("DecryptData", new object[] {
                        key,
                        InData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DecryptDataAsync(string key, string InData) {
            this.DecryptDataAsync(key, InData, null);
        }
        
        /// <remarks/>
        public void DecryptDataAsync(string key, string InData, object userState) {
            if ((this.DecryptDataOperationCompleted == null)) {
                this.DecryptDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptDataOperationCompleted);
            }
            this.InvokeAsync("DecryptData", new object[] {
                        key,
                        InData}, this.DecryptDataOperationCompleted, userState);
        }
        
        private void OnDecryptDataOperationCompleted(object arg) {
            if ((this.DecryptDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecryptDataCompleted(this, new DecryptDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EncryptFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptFile(string key, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string FileName) {
            object[] results = this.Invoke("EncryptFile", new object[] {
                        key,
                        fs,
                        FileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptFileAsync(string key, byte[] fs, string FileName) {
            this.EncryptFileAsync(key, fs, FileName, null);
        }
        
        /// <remarks/>
        public void EncryptFileAsync(string key, byte[] fs, string FileName, object userState) {
            if ((this.EncryptFileOperationCompleted == null)) {
                this.EncryptFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptFileOperationCompleted);
            }
            this.InvokeAsync("EncryptFile", new object[] {
                        key,
                        fs,
                        FileName}, this.EncryptFileOperationCompleted, userState);
        }
        
        private void OnEncryptFileOperationCompleted(object arg) {
            if ((this.EncryptFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptFileCompleted(this, new EncryptFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DecryptFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DecryptFile(string key, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string FileName) {
            object[] results = this.Invoke("DecryptFile", new object[] {
                        key,
                        fs,
                        FileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DecryptFileAsync(string key, byte[] fs, string FileName) {
            this.DecryptFileAsync(key, fs, FileName, null);
        }
        
        /// <remarks/>
        public void DecryptFileAsync(string key, byte[] fs, string FileName, object userState) {
            if ((this.DecryptFileOperationCompleted == null)) {
                this.DecryptFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptFileOperationCompleted);
            }
            this.InvokeAsync("DecryptFile", new object[] {
                        key,
                        fs,
                        FileName}, this.DecryptFileOperationCompleted, userState);
        }
        
        private void OnDecryptFileOperationCompleted(object arg) {
            if ((this.DecryptFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecryptFileCompleted(this, new DecryptFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PubKeyEncrypt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PubKeyEncrypt(string Base64EncodeCert, string InData) {
            object[] results = this.Invoke("PubKeyEncrypt", new object[] {
                        Base64EncodeCert,
                        InData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PubKeyEncryptAsync(string Base64EncodeCert, string InData) {
            this.PubKeyEncryptAsync(Base64EncodeCert, InData, null);
        }
        
        /// <remarks/>
        public void PubKeyEncryptAsync(string Base64EncodeCert, string InData, object userState) {
            if ((this.PubKeyEncryptOperationCompleted == null)) {
                this.PubKeyEncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPubKeyEncryptOperationCompleted);
            }
            this.InvokeAsync("PubKeyEncrypt", new object[] {
                        Base64EncodeCert,
                        InData}, this.PubKeyEncryptOperationCompleted, userState);
        }
        
        private void OnPubKeyEncryptOperationCompleted(object arg) {
            if ((this.PubKeyEncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PubKeyEncryptCompleted(this, new PubKeyEncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PriKeyDecrypt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PriKeyDecrypt(string InData) {
            object[] results = this.Invoke("PriKeyDecrypt", new object[] {
                        InData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PriKeyDecryptAsync(string InData) {
            this.PriKeyDecryptAsync(InData, null);
        }
        
        /// <remarks/>
        public void PriKeyDecryptAsync(string InData, object userState) {
            if ((this.PriKeyDecryptOperationCompleted == null)) {
                this.PriKeyDecryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPriKeyDecryptOperationCompleted);
            }
            this.InvokeAsync("PriKeyDecrypt", new object[] {
                        InData}, this.PriKeyDecryptOperationCompleted, userState);
        }
        
        private void OnPriKeyDecryptOperationCompleted(object arg) {
            if ((this.PriKeyDecryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PriKeyDecryptCompleted(this, new PriKeyDecryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SignDataByP7", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SignDataByP7(string InData) {
            object[] results = this.Invoke("SignDataByP7", new object[] {
                        InData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SignDataByP7Async(string InData) {
            this.SignDataByP7Async(InData, null);
        }
        
        /// <remarks/>
        public void SignDataByP7Async(string InData, object userState) {
            if ((this.SignDataByP7OperationCompleted == null)) {
                this.SignDataByP7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignDataByP7OperationCompleted);
            }
            this.InvokeAsync("SignDataByP7", new object[] {
                        InData}, this.SignDataByP7OperationCompleted, userState);
        }
        
        private void OnSignDataByP7OperationCompleted(object arg) {
            if ((this.SignDataByP7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignDataByP7Completed(this, new SignDataByP7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifySignedDataByP7", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifySignedDataByP7(string Pkcs7SignData) {
            object[] results = this.Invoke("VerifySignedDataByP7", new object[] {
                        Pkcs7SignData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifySignedDataByP7Async(string Pkcs7SignData) {
            this.VerifySignedDataByP7Async(Pkcs7SignData, null);
        }
        
        /// <remarks/>
        public void VerifySignedDataByP7Async(string Pkcs7SignData, object userState) {
            if ((this.VerifySignedDataByP7OperationCompleted == null)) {
                this.VerifySignedDataByP7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySignedDataByP7OperationCompleted);
            }
            this.InvokeAsync("VerifySignedDataByP7", new object[] {
                        Pkcs7SignData}, this.VerifySignedDataByP7OperationCompleted, userState);
        }
        
        private void OnVerifySignedDataByP7OperationCompleted(object arg) {
            if ((this.VerifySignedDataByP7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifySignedDataByP7Completed(this, new VerifySignedDataByP7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetP7SignDataInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetP7SignDataInfo(string Pkcs7SignData, int type) {
            object[] results = this.Invoke("GetP7SignDataInfo", new object[] {
                        Pkcs7SignData,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetP7SignDataInfoAsync(string Pkcs7SignData, int type) {
            this.GetP7SignDataInfoAsync(Pkcs7SignData, type, null);
        }
        
        /// <remarks/>
        public void GetP7SignDataInfoAsync(string Pkcs7SignData, int type, object userState) {
            if ((this.GetP7SignDataInfoOperationCompleted == null)) {
                this.GetP7SignDataInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetP7SignDataInfoOperationCompleted);
            }
            this.InvokeAsync("GetP7SignDataInfo", new object[] {
                        Pkcs7SignData,
                        type}, this.GetP7SignDataInfoOperationCompleted, userState);
        }
        
        private void OnGetP7SignDataInfoOperationCompleted(object arg) {
            if ((this.GetP7SignDataInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetP7SignDataInfoCompleted(this, new GetP7SignDataInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SignDataXML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SignDataXML(string InData) {
            object[] results = this.Invoke("SignDataXML", new object[] {
                        InData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SignDataXMLAsync(string InData) {
            this.SignDataXMLAsync(InData, null);
        }
        
        /// <remarks/>
        public void SignDataXMLAsync(string InData, object userState) {
            if ((this.SignDataXMLOperationCompleted == null)) {
                this.SignDataXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignDataXMLOperationCompleted);
            }
            this.InvokeAsync("SignDataXML", new object[] {
                        InData}, this.SignDataXMLOperationCompleted, userState);
        }
        
        private void OnSignDataXMLOperationCompleted(object arg) {
            if ((this.SignDataXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignDataXMLCompleted(this, new SignDataXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifySignedDataXML", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifySignedDataXML(string InData) {
            object[] results = this.Invoke("VerifySignedDataXML", new object[] {
                        InData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifySignedDataXMLAsync(string InData) {
            this.VerifySignedDataXMLAsync(InData, null);
        }
        
        /// <remarks/>
        public void VerifySignedDataXMLAsync(string InData, object userState) {
            if ((this.VerifySignedDataXMLOperationCompleted == null)) {
                this.VerifySignedDataXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySignedDataXMLOperationCompleted);
            }
            this.InvokeAsync("VerifySignedDataXML", new object[] {
                        InData}, this.VerifySignedDataXMLOperationCompleted, userState);
        }
        
        private void OnVerifySignedDataXMLOperationCompleted(object arg) {
            if ((this.VerifySignedDataXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifySignedDataXMLCompleted(this, new VerifySignedDataXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetXMLSignatureInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXMLSignatureInfo(string XMLSignedData, short type) {
            object[] results = this.Invoke("GetXMLSignatureInfo", new object[] {
                        XMLSignedData,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXMLSignatureInfoAsync(string XMLSignedData, short type) {
            this.GetXMLSignatureInfoAsync(XMLSignedData, type, null);
        }
        
        /// <remarks/>
        public void GetXMLSignatureInfoAsync(string XMLSignedData, short type, object userState) {
            if ((this.GetXMLSignatureInfoOperationCompleted == null)) {
                this.GetXMLSignatureInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXMLSignatureInfoOperationCompleted);
            }
            this.InvokeAsync("GetXMLSignatureInfo", new object[] {
                        XMLSignedData,
                        type}, this.GetXMLSignatureInfoOperationCompleted, userState);
        }
        
        private void OnGetXMLSignatureInfoOperationCompleted(object arg) {
            if ((this.GetXMLSignatureInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXMLSignatureInfoCompleted(this, new GetXMLSignatureInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateTimeStampRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateTimeStampRequest(string InData) {
            object[] results = this.Invoke("CreateTimeStampRequest", new object[] {
                        InData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTimeStampRequestAsync(string InData) {
            this.CreateTimeStampRequestAsync(InData, null);
        }
        
        /// <remarks/>
        public void CreateTimeStampRequestAsync(string InData, object userState) {
            if ((this.CreateTimeStampRequestOperationCompleted == null)) {
                this.CreateTimeStampRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTimeStampRequestOperationCompleted);
            }
            this.InvokeAsync("CreateTimeStampRequest", new object[] {
                        InData}, this.CreateTimeStampRequestOperationCompleted, userState);
        }
        
        private void OnCreateTimeStampRequestOperationCompleted(object arg) {
            if ((this.CreateTimeStampRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTimeStampRequestCompleted(this, new CreateTimeStampRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateTimeStampResponse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateTimeStampResponse(string sReq) {
            object[] results = this.Invoke("CreateTimeStampResponse", new object[] {
                        sReq});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateTimeStampResponseAsync(string sReq) {
            this.CreateTimeStampResponseAsync(sReq, null);
        }
        
        /// <remarks/>
        public void CreateTimeStampResponseAsync(string sReq, object userState) {
            if ((this.CreateTimeStampResponseOperationCompleted == null)) {
                this.CreateTimeStampResponseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTimeStampResponseOperationCompleted);
            }
            this.InvokeAsync("CreateTimeStampResponse", new object[] {
                        sReq}, this.CreateTimeStampResponseOperationCompleted, userState);
        }
        
        private void OnCreateTimeStampResponseOperationCompleted(object arg) {
            if ((this.CreateTimeStampResponseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTimeStampResponseCompleted(this, new CreateTimeStampResponseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyTimeStamp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VerifyTimeStamp(string scontent, string sResponse) {
            object[] results = this.Invoke("VerifyTimeStamp", new object[] {
                        scontent,
                        sResponse});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyTimeStampAsync(string scontent, string sResponse) {
            this.VerifyTimeStampAsync(scontent, sResponse, null);
        }
        
        /// <remarks/>
        public void VerifyTimeStampAsync(string scontent, string sResponse, object userState) {
            if ((this.VerifyTimeStampOperationCompleted == null)) {
                this.VerifyTimeStampOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyTimeStampOperationCompleted);
            }
            this.InvokeAsync("VerifyTimeStamp", new object[] {
                        scontent,
                        sResponse}, this.VerifyTimeStampOperationCompleted, userState);
        }
        
        private void OnVerifyTimeStampOperationCompleted(object arg) {
            if ((this.VerifyTimeStampCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyTimeStampCompleted(this, new VerifyTimeStampCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("JSCASoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTimeStampInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTimeStampInfo(string tsResponseData, int type) {
            object[] results = this.Invoke("GetTimeStampInfo", new object[] {
                        tsResponseData,
                        type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeStampInfoAsync(string tsResponseData, int type) {
            this.GetTimeStampInfoAsync(tsResponseData, type, null);
        }
        
        /// <remarks/>
        public void GetTimeStampInfoAsync(string tsResponseData, int type, object userState) {
            if ((this.GetTimeStampInfoOperationCompleted == null)) {
                this.GetTimeStampInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeStampInfoOperationCompleted);
            }
            this.InvokeAsync("GetTimeStampInfo", new object[] {
                        tsResponseData,
                        type}, this.GetTimeStampInfoOperationCompleted, userState);
        }
        
        private void OnGetTimeStampInfoOperationCompleted(object arg) {
            if ((this.GetTimeStampInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeStampInfoCompleted(this, new GetTimeStampInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/", IsNullable=false)]
    public partial class JSCASoapHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string userNameField;
        
        private string pwdField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Pwd {
            get {
                return this.pwdField;
            }
            set {
                this.pwdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetCertTrustListCompletedEventHandler(object sender, SetCertTrustListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCertTrustListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCertTrustListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void QueryCertTrustListAltNamesCompletedEventHandler(object sender, QueryCertTrustListAltNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryCertTrustListAltNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCertTrustListAltNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void QueryCertTrustListCompletedEventHandler(object sender, QueryCertTrustListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryCertTrustListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCertTrustListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DelCertTrustListCompletedEventHandler(object sender, DelCertTrustListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DelCertTrustListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DelCertTrustListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetWebAppNameCompletedEventHandler(object sender, SetWebAppNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetWebAppNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetWebAppNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetSignMethodCompletedEventHandler(object sender, SetSignMethodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSignMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSignMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSignMethodCompletedEventHandler(object sender, GetSignMethodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSignMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSignMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetEncryptMethodCompletedEventHandler(object sender, SetEncryptMethodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEncryptMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEncryptMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetEncryptMethodCompletedEventHandler(object sender, GetEncryptMethodCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEncryptMethodCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEncryptMethodCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServerCertificateCompletedEventHandler(object sender, GetServerCertificateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GenRandomCompletedEventHandler(object sender, GenRandomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCertInfoCompletedEventHandler(object sender, GetCertInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCertInfoByOidCompletedEventHandler(object sender, GetCertInfoByOidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertInfoByOidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertInfoByOidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateCertCompletedEventHandler(object sender, ValidateCertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SignDataCompletedEventHandler(object sender, SignDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifySignedDataCompletedEventHandler(object sender, VerifySignedDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifySignedDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifySignedDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SignFileCompletedEventHandler(object sender, SignFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifySignedFileCompletedEventHandler(object sender, VerifySignedFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifySignedFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifySignedFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteFileCompletedEventHandler(object sender, DeleteFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EncryptDataCompletedEventHandler(object sender, EncryptDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DecryptDataCompletedEventHandler(object sender, DecryptDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecryptDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecryptDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EncryptFileCompletedEventHandler(object sender, EncryptFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DecryptFileCompletedEventHandler(object sender, DecryptFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecryptFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecryptFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PubKeyEncryptCompletedEventHandler(object sender, PubKeyEncryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PubKeyEncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PubKeyEncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PriKeyDecryptCompletedEventHandler(object sender, PriKeyDecryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PriKeyDecryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PriKeyDecryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SignDataByP7CompletedEventHandler(object sender, SignDataByP7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignDataByP7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignDataByP7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifySignedDataByP7CompletedEventHandler(object sender, VerifySignedDataByP7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifySignedDataByP7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifySignedDataByP7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetP7SignDataInfoCompletedEventHandler(object sender, GetP7SignDataInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetP7SignDataInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetP7SignDataInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SignDataXMLCompletedEventHandler(object sender, SignDataXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignDataXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignDataXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifySignedDataXMLCompletedEventHandler(object sender, VerifySignedDataXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifySignedDataXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifySignedDataXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetXMLSignatureInfoCompletedEventHandler(object sender, GetXMLSignatureInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXMLSignatureInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXMLSignatureInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateTimeStampRequestCompletedEventHandler(object sender, CreateTimeStampRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTimeStampRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTimeStampRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateTimeStampResponseCompletedEventHandler(object sender, CreateTimeStampResponseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTimeStampResponseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateTimeStampResponseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyTimeStampCompletedEventHandler(object sender, VerifyTimeStampCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyTimeStampCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyTimeStampCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetTimeStampInfoCompletedEventHandler(object sender, GetTimeStampInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeStampInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeStampInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591