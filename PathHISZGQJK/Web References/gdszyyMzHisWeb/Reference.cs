//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.1 版自动生成。
// 
#pragma warning disable 1591

namespace PathHISZGQJK.gdszyyMzHisWeb {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="HisForInspectItemServiceSoap", Namespace="http://tempuri.org/")]
    public partial class HisForInspectItemService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback NetTestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCheckRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteCheckItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelExecCheckItemOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public HisForInspectItemService() {
            this.Url = global::PathHISZGQJK.Properties.Settings.Default.PathHISZGQJK_gdszyyMzHisWeb_HisForInspectItemService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event NetTestCompletedEventHandler NetTestCompleted;
        
        /// <remarks/>
        public event GetPatientInfoCompletedEventHandler GetPatientInfoCompleted;
        
        /// <remarks/>
        public event GetCheckRecordCompletedEventHandler GetCheckRecordCompleted;
        
        /// <remarks/>
        public event ExecuteCheckItemCompletedEventHandler ExecuteCheckItemCompleted;
        
        /// <remarks/>
        public event CancelExecCheckItemCompletedEventHandler CancelExecCheckItemCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NetTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NetTest(string request) {
            object[] results = this.Invoke("NetTest", new object[] {
                        request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NetTestAsync(string request) {
            this.NetTestAsync(request, null);
        }
        
        /// <remarks/>
        public void NetTestAsync(string request, object userState) {
            if ((this.NetTestOperationCompleted == null)) {
                this.NetTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNetTestOperationCompleted);
            }
            this.InvokeAsync("NetTest", new object[] {
                        request}, this.NetTestOperationCompleted, userState);
        }
        
        private void OnNetTestOperationCompleted(object arg) {
            if ((this.NetTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NetTestCompleted(this, new NetTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientInfo(string Request) {
            object[] results = this.Invoke("GetPatientInfo", new object[] {
                        Request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientInfoAsync(string Request) {
            this.GetPatientInfoAsync(Request, null);
        }
        
        /// <remarks/>
        public void GetPatientInfoAsync(string Request, object userState) {
            if ((this.GetPatientInfoOperationCompleted == null)) {
                this.GetPatientInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientInfoOperationCompleted);
            }
            this.InvokeAsync("GetPatientInfo", new object[] {
                        Request}, this.GetPatientInfoOperationCompleted, userState);
        }
        
        private void OnGetPatientInfoOperationCompleted(object arg) {
            if ((this.GetPatientInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientInfoCompleted(this, new GetPatientInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCheckRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCheckRecord(string Request) {
            object[] results = this.Invoke("GetCheckRecord", new object[] {
                        Request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCheckRecordAsync(string Request) {
            this.GetCheckRecordAsync(Request, null);
        }
        
        /// <remarks/>
        public void GetCheckRecordAsync(string Request, object userState) {
            if ((this.GetCheckRecordOperationCompleted == null)) {
                this.GetCheckRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckRecordOperationCompleted);
            }
            this.InvokeAsync("GetCheckRecord", new object[] {
                        Request}, this.GetCheckRecordOperationCompleted, userState);
        }
        
        private void OnGetCheckRecordOperationCompleted(object arg) {
            if ((this.GetCheckRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckRecordCompleted(this, new GetCheckRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteCheckItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteCheckItem(string Request) {
            object[] results = this.Invoke("ExecuteCheckItem", new object[] {
                        Request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteCheckItemAsync(string Request) {
            this.ExecuteCheckItemAsync(Request, null);
        }
        
        /// <remarks/>
        public void ExecuteCheckItemAsync(string Request, object userState) {
            if ((this.ExecuteCheckItemOperationCompleted == null)) {
                this.ExecuteCheckItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteCheckItemOperationCompleted);
            }
            this.InvokeAsync("ExecuteCheckItem", new object[] {
                        Request}, this.ExecuteCheckItemOperationCompleted, userState);
        }
        
        private void OnExecuteCheckItemOperationCompleted(object arg) {
            if ((this.ExecuteCheckItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCheckItemCompleted(this, new ExecuteCheckItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelExecCheckItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelExecCheckItem(string Request) {
            object[] results = this.Invoke("CancelExecCheckItem", new object[] {
                        Request});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelExecCheckItemAsync(string Request) {
            this.CancelExecCheckItemAsync(Request, null);
        }
        
        /// <remarks/>
        public void CancelExecCheckItemAsync(string Request, object userState) {
            if ((this.CancelExecCheckItemOperationCompleted == null)) {
                this.CancelExecCheckItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelExecCheckItemOperationCompleted);
            }
            this.InvokeAsync("CancelExecCheckItem", new object[] {
                        Request}, this.CancelExecCheckItemOperationCompleted, userState);
        }
        
        private void OnCancelExecCheckItemOperationCompleted(object arg) {
            if ((this.CancelExecCheckItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelExecCheckItemCompleted(this, new CancelExecCheckItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void NetTestCompletedEventHandler(object sender, NetTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NetTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NetTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPatientInfoCompletedEventHandler(object sender, GetPatientInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCheckRecordCompletedEventHandler(object sender, GetCheckRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCheckRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecuteCheckItemCompletedEventHandler(object sender, ExecuteCheckItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteCheckItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteCheckItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CancelExecCheckItemCompletedEventHandler(object sender, CancelExecCheckItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelExecCheckItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelExecCheckItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591